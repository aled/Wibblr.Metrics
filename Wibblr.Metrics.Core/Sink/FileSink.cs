using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Wibblr.Collections;
using Wibblr.Metrics.Plugins.Interfaces;

namespace Wibblr.Metrics.Core
{
    /// <summary>
    /// Sink used for writing metrics to files. The serialization format (e.g. json, csv)
    /// is handled by an external serializer, and the file name is generated by an external class.
    /// </summary>
    public class FileSink : IMetricsSink
    {
        private IFileNamingStrategy _fileNamingStrategy;
        private IMetricsSerializer _serializer;

        public FileSink(IMetricsSerializer serializer, IFileNamingStrategy fileNamingStrategy)
        {
            _serializer = serializer;
            _fileNamingStrategy = fileNamingStrategy;
        }

        public void Flush(IEnumerable<WindowedCounter> counters)
        {
            if (counters.Any())
            {
                foreach (var partition in counters.Partition((a, b) => !_fileNamingStrategy.EqualNames(a, b)))
                {
                    var fileName = _fileNamingStrategy.BaseName(partition.First()) + "." + _serializer.FileExtension;
                    using (var w = CreateOrOpen(fileName, writer => _serializer.WriteCounterHeader(writer)))
                        _serializer.Write(partition, w);
                }
            }
        }

        public void Flush(IEnumerable<WindowedBucket> buckets)
        {
            if (buckets.Any())
            {
                foreach (var partition in buckets.Partition((a, b) => !_fileNamingStrategy.EqualNames(a, b)))
                {
                    var fileName = _fileNamingStrategy.BaseName(partition.First()) + "." + _serializer.FileExtension;
                    using (var w = CreateOrOpen(fileName, writer => _serializer.WriteBucketHeader(writer)))
                        _serializer.Write(partition, w);
                }
            }
        }

        public void Flush(IEnumerable<TimestampedEvent> events)
        {
            if (events.Any())
            {
                foreach (var partition in events.Partition((a, b) => !_fileNamingStrategy.EqualNames(a, b)))
                {
                    var fileName = _fileNamingStrategy.BaseName(partition.First()) + "." + _serializer.FileExtension;
                    using (var w = CreateOrOpen(fileName, writer => _serializer.WriteEventHeader(writer)))
                        _serializer.Write(partition, w);
                }
            }
        }

        public void Flush(IEnumerable<Profile> profiles)
        {
            if (profiles.Any())
            {
                foreach (var partition in profiles.Partition((a, b) => !_fileNamingStrategy.EqualNames(a, b)))
                {
                    var fileName = _fileNamingStrategy.BaseName(partition.First()) + "." + _serializer.FileExtension;
                    using (var w = CreateOrOpen(fileName, writer => _serializer.WriteProfileHeader(writer)))
                    {
                        _serializer.Write(partition, w);
                    }
                }
            }
        }

        public void FlushComplete()
        {
            // no op
        }

        /// <summary>
        /// Open a file, or create it if it does not exist.
        /// If creating the file, execute the OnCreate action; if opening the file
        /// then seek to the end so that writes will append.
        /// </summary>
        /// <param name="fileName">Name of file</param>
        /// <param name="OnCreate">Action to execute if file was created</param>
        /// <returns></returns>
        private StreamWriter CreateOrOpen(string fileName, Action<TextWriter> OnCreate)
        {
            var stream = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.ReadWrite);
            var writer = new StreamWriter(stream);

            var len = stream.Length;

            if (len == 0)
                OnCreate(writer);
            else
                stream.Seek(len, SeekOrigin.Begin);
            
            return writer;
        }
    }
}
